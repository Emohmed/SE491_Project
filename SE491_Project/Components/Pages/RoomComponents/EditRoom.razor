@page "/EditRoom"
@page "/EditRoom/{RoomId:guid}"
@rendermode InteractiveServer
@using SE491_Project.Data.Entities
@inject NavigationManager _NavigationManager
@inject IRoomServices _RoomDesignServices

<h3>تعديل بيانات الغرفة</h3>

@if (IsLoading)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <EditForm Model="Room" OnValidSubmit="SaveRoom">
        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="Room.Number" Label="رقم الغرفة" Required="true" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="Room.Type" Label="نوع الغرفة" Required="true" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="Room.PricePerNight" Label="سعر الليلة" Required="true" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudSelect T="RoomStatus" @bind-Value="Room.Status" Label="حالة الغرفة" Required="true">
                    @foreach (var status in Enum.GetValues<RoomStatus>())
                    {
                        <MudSelectItem Value="status">@status</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">حفظ التعديلات</MudButton>
            </MudItem>
        </MudGrid>
    </EditForm>
}

@code {
    [Parameter] public Guid RoomId { get; set; }
    private Room Room { get; set; } = new Room();
    private bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if (RoomId != Guid.Empty)
        {
            Room = await _RoomDesignServices.GetRoomById(RoomId);
        }
        IsLoading = false;
    }

    private async Task SaveRoom()
    {
        await _RoomDesignServices.UpdateRoomAsync(Room);
        _NavigationManager.NavigateTo("/RoomList");
    }
}




